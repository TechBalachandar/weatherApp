// Generated by Dagger (https://dagger.dev).
package com.balu.whatsweather.di;

import com.balu.whatsweather.data.repository.WeatherRepository;
import com.balu.whatsweather.data.repository.WeatherRepositoryImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideWeatherRepositoryFactory implements Factory<WeatherRepository> {
  private final Provider<WeatherRepositoryImpl> weatherRepositoryImplProvider;

  public AppModule_ProvideWeatherRepositoryFactory(
      Provider<WeatherRepositoryImpl> weatherRepositoryImplProvider) {
    this.weatherRepositoryImplProvider = weatherRepositoryImplProvider;
  }

  @Override
  public WeatherRepository get() {
    return provideWeatherRepository(weatherRepositoryImplProvider.get());
  }

  public static AppModule_ProvideWeatherRepositoryFactory create(
      Provider<WeatherRepositoryImpl> weatherRepositoryImplProvider) {
    return new AppModule_ProvideWeatherRepositoryFactory(weatherRepositoryImplProvider);
  }

  public static WeatherRepository provideWeatherRepository(
      WeatherRepositoryImpl weatherRepositoryImpl) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideWeatherRepository(weatherRepositoryImpl));
  }
}
