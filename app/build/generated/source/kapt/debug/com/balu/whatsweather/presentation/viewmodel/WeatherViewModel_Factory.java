// Generated by Dagger (https://dagger.dev).
package com.balu.whatsweather.presentation.viewmodel;

import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import com.balu.whatsweather.data.location.LocationTracker;
import com.balu.whatsweather.data.repository.WeatherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherViewModel_Factory implements Factory<WeatherViewModel> {
  private final Provider<WeatherRepository> weatherRepositoryProvider;

  private final Provider<LocationTracker> locationTrackerProvider;

  private final Provider<DataStore<Preferences>> dataStoreProvider;

  public WeatherViewModel_Factory(Provider<WeatherRepository> weatherRepositoryProvider,
      Provider<LocationTracker> locationTrackerProvider,
      Provider<DataStore<Preferences>> dataStoreProvider) {
    this.weatherRepositoryProvider = weatherRepositoryProvider;
    this.locationTrackerProvider = locationTrackerProvider;
    this.dataStoreProvider = dataStoreProvider;
  }

  @Override
  public WeatherViewModel get() {
    return newInstance(weatherRepositoryProvider.get(), locationTrackerProvider.get(), dataStoreProvider.get());
  }

  public static WeatherViewModel_Factory create(
      Provider<WeatherRepository> weatherRepositoryProvider,
      Provider<LocationTracker> locationTrackerProvider,
      Provider<DataStore<Preferences>> dataStoreProvider) {
    return new WeatherViewModel_Factory(weatherRepositoryProvider, locationTrackerProvider, dataStoreProvider);
  }

  public static WeatherViewModel newInstance(WeatherRepository weatherRepository,
      LocationTracker locationTracker, DataStore<Preferences> dataStore) {
    return new WeatherViewModel(weatherRepository, locationTracker, dataStore);
  }
}
